/*
 * UART_EX1.c
 *
 * This program assumes a clock frequency of 8MHz
 * Baud rate of 9600 used to keep dowm error
 * Based on Barnett Example Fig 2-40
 *
 * Created: 17/10/2011 01:09:43
 *  Author: 
 */ 
void sendmsg (char *s);
void init_USART(void);
void init_TIMER2SETUP(void);
void init_TIMER1SETUP(void);
void init_adc(void);

#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>

unsigned char qcntr = 0,sndcntr = 0;   /*indexes into the que*/
unsigned char queue[50];       /*character queue*/
unsigned char timecount;				// Extends TCNT of Timer1
unsigned int start_edge, end_edge;		// globals for times.
unsigned long Time_Period_High;
unsigned long Time_Period_Low;
unsigned long clocks;
volatile unsigned int adc_flag;
unsigned long adc_val;
unsigned long adc_val_mV;
unsigned int adc_cont;
unsigned int timer_cont;
volatile unsigned int new_timer_flag;
char msg_buffer[30];
/*message arrays*/
char msg0[] = {"You put in 0, spinning at 0%"};
char msg1[] = {"You put in 1, spinning at 10%"};
char msg2[] = {"You put in 2, spinning at 20%"};
char msg3[] = {"You put in 3, spinning at 30%"};
char msg4[] = {"You put in 4, spinning at 40%"};
char msg5[] = {"You put in 5, spinning at 50%"};
char msg6[] = {"You put in 6, spinning at 60%"};
char msg7[] = {"You put in 7, spinning at 70%"};
char msg8[] = {"You put in 8, spinning at 80%"};
char msg9[] = {"You put in 9, spinning at 90%"};
char msgR[] = {"You put in R, spinning in reverse"};
char msgF[] = {"You put in F, spinning forward"};
char msgB[] = {"You put in B, stopping the motor"};
char msgG[] = {"You put in G, resuming the motor"};		
char msgI[] = {"You put in I, beginning to continuously report ADC0 conversion result in mV"};
char msgJ[] = {"You put in J, stopping the continuous report of ADC0 input"};
char msgDirectionForward[] = {"It's spinning forward"};
char msgDirectionReverse[] = {"It's spinning in reverse"};
char msgC[] = {"You put in C, beginning continuous report of Timer input period in microseconds"};
char msgE[] = {"You put in E, stopping the continuous report of Timer input"};
//char msgD[] = {"Debug"};
char msgDefault[] = {"Please use one of the key characters."};

int main(void)
{
	char ch;												/* character variable for received character*/
	unsigned int x = 0;										//This x value is used to store the value of Time_period_high + time_period_low in the if condition under the switch statement
	unsigned int motorDirection = 0;						//1 = forward, 2 = backwards
	DDRD = 0b00001000;
	DDRB = 0b00010010;
	init_adc();
	init_USART();
	init_TIMER2SETUP();
	init_TIMER1SETUP()			
//	TCCR1A = 0; // Disable all o/p waveforms                                                                                                                           MOVED TO TIMER1SETUP
//	TCCR1B = 0b00000010;		// Noise Canceller off, Falling Edge, CLK/8 (2MHz) *OLDCODE CLK/8 (2MHz) T1 source ((1<<ICNC1) | (1<<ICES1) | (2<<CS10));*             MOVED TO TIMER1SETUP
//	TIMSK1 = 0b00100001;//((1<<ICIE1) | (1 << TOIE1));																												   MOVED TO TIMER1SETUP
//	TIMSK2 = 0b00000000;//timer2																																	   MOVED TO TIMER2SETUP
	sei(); /*global interrupt enable */
	start_edge = 0;											//Initalising the start_edge variable
	timecount = 0;											//Initalising the timecount variable
	while (1)
	{
		if (UCSR0A & (1<<RXC0)) /*check for character received*/
		{
			ch = UDR0;    /*get character sent from PC*/
			switch (ch)
			{
/*
'F' or 'f': Set Direction of motor spin to Forward.
'R' or 'r': Set Direction of motor spin to Reverse.
‘B’ or ‘b’: Stop motor irrespective of the motor speed previously selected – ie Turn on Brake
‘G’ or ‘g’: Start the motor (depends on the motor speed previously selected) – ie Turn off Brake
‘0’ to ‘9’: Set the motor speed using the OC2RB register, to value from 0 to 90% of full speed. You must convert the char value to an integer, and set the PWM based on this value.
‘T’ or ‘t’: Report the period of the 555 Timer in microseconds.								WW
‘L’ or ‘l’: Report the time taken by the low pulse of the 555 Timer signal in microseconds  WW
‘H’ or ‘h’: Report the time taken by the high pulse of the 555 Timer signal in microseconds WW
'C' or 'c': Continuously report the Timer input period in microseconds.
‘E’ or ‘e’: Stop continuous reporting of Timer input.
‘A’ or ‘a’: Report the ADC0 conversion result. This is the ADC value.
‘V’ or ‘v’: Report the ADC0 conversion result in mV. You must convert the ADC value to mV
'I' or 'i': Continuously report the ADC0 conversion result in mV.
‘J’ or ‘j’: Stop continuous reporting of ADC0 input.
'D' or 'd': Report motor direction to user. 
‘S’ or ‘s’: Report the current value of the OCR2B register to the user.
*/					
				case 'F':
				case 'f':
					PORTB = (PORTB & 0b11101111);			//PORTB = (PORTB & 0b11101111);
					sendmsg(msgF);							//Send message it's spinning forwards
					motorDirection = 1;						//Note what direction it's spinning it, used in the "D" case
				break;
				case 'R':
				case 'r':
					PORTB = (PORTB | 0b00010000);//1<<PORTB4 PORTB = (PORTB | 0b00010000);
					sendmsg(msgR);							//Send message its spinning backwards
					motorDirection = 2;						//Note direction for case "D"
				break;
				case 'B':
				case 'b':
					PORTB = (PORTB | 0b00000010);			//Stop the motor, turn on break 
//					PORTB |= (1<<PORTB1);
//					OCR2B = 0;
					sendmsg(msgB);
				break;
				case 'G':
				case 'g':
					PORTB = (PORTB & 0b11111101);						//free the location 1 so that it will go again
/*					OCR2B = motorSpeed;									//resume it at the speed it was before the break was called
					sendmsg(msgG);										//send the message that it is going again
					if(motorDirection == 1)								//depending on what the value for motor direction is, i want the motor to remain spinning in the same direction it was before the break was called.
					{
						PORTB = (PORTB & 0b00000000);
					}
					else
					{
						PORTB = (PORTB | 0b00010000);
					}
*/
				break;
																		/*OCR2B controls the motor speed, each case is it divided by 10 to give 10 different speeds*/
				case '0':
					OCR2B = 0;
//					motorSpeed = 0;
					sendmsg(msg0);
				break;
				case '1':
					OCR2B = 25;
//					motorSpeed = 25;
					sendmsg(msg1);
				break;
				case '2':
					OCR2B = 50;
//					motorSpeed = 50;
					sendmsg(msg2);
				break;
				case '3':
					OCR2B = 75;
//					motorSpeed = 75;
					sendmsg(msg3);
				break;
				case '4':
					OCR2B = 100;
//					motorSpeed = 100;
					sendmsg(msg4);
				break;
				case '5':
					OCR2B = 125;
//					motorSpeed = 125;
					sendmsg(msg5);
				break;
				case '6':
					OCR2B = 150;
//					motorSpeed = 150;
					sendmsg(msg6);
				break;
				case '7':
					OCR2B = 175;
//					motorSpeed = 175;
					sendmsg(msg7);
				break;
				case '8':
					OCR2B = 200;
//					motorSpeed = 200;
					sendmsg(msg8);
				break;
				case '9':
					OCR2B = 225;
//					motorSpeed = 225;
					sendmsg(msg9);
				break;

				case 'T':
				case 't':
					sprintf(msg_buffer,"Period in microseconds = %lu", clocks);//send current value of clocks
					sendmsg(msg_buffer);
				break;
				case 'L':
				case 'l':
					sprintf(msg_buffer,"Low = %lu", Time_Period_Low);	//Send value of time period low
					sendmsg(msg_buffer);
				break;
				case 'H':
				case 'h':
					sprintf(msg_buffer,"High = %lu", Time_Period_High);//Send the value of time_period_high
					sendmsg(msg_buffer);
				break;
				case 'C':
				case 'c':
					timer_cont = 1;										//Want to start continuous report, set to 1 to allow it into the condition under the switch statement
					sendmsg(msgC);
				break;
				case 'E':
				case 'e':
					timer_cont = 0;										//Want to stop reporting, changing to 0 doesn't allow it into the condition under the switch statemetn
					sendmsg(msgE);
				break;
				case 'A':
				case 'a':
					sprintf(msg_buffer, "Value: %ld", adc_val);			//Send ADC value
					sendmsg(msg_buffer);
				break;
				case 'V':
				case 'v':
					adc_val_mV = ((adc_val*5000)/1024);					//Calculation to mV
					sprintf(msg_buffer, "Value in mV: %ld", adc_val_mV);//Send mV value
					sendmsg(msg_buffer);
				break;
				case 'I':
				case 'i':
					adc_cont = 1;										//Want to start ADC reporting, allows entry to the condition under the switch statement
					sendmsg(msgI);							
				break;
				case 'J':
				case 'j':
					adc_cont = 0;										//Want to stop ADC reporting, this is done by changing the cont value so it will never enter the if loop below the switch statement
					sendmsg(msgJ);
				break;
				case 'D':
				case 'd':
					if(motorDirection == 1)								//If motorDirection is 1 send it's going forwards, otherwise send its going backwards
					sendmsg(msgDirectionForward);
					else
					sendmsg(msgDirectionReverse);
				break;
				case 'S':
				case 's':
					sprintf(msg_buffer,"OCR2B value is = %d", OCR2B);	//Print current OCR2B value
					sendmsg(msg_buffer);
				break;
				default:
					sendmsg(msgDefault);								//Tell user to insert one of the characters above
			}
		}
		if(adc_cont == 1)												//Check if the user pressed the character to start continuous report
		{
			if(adc_flag == 1)											//Check what the flag value is
			{
				adc_flag = 0;
				if(qcntr == sndcntr)									//Make sure the data can be sent 
				{
					adc_val_mV = ((adc_val*5000)/1024);					//Calculation to mV
					sprintf(msg_buffer, "Current ADC value = %lu", adc_val_mV);
					sendmsg(msg_buffer);
				}
			}
		}										
		if(timer_cont == 1)												//Check if user pressed character to start continious report
		{
			if(new_timer_flag == 1)										//See what value the flag is
			{
				new_timer_flag = 0;
				if(qcntr == sndcntr)									//Make sure data can be sent
				{
					x = Time_Period_High + Time_Period_Low;				//X is a unsigned int declared in the main function, it holds the value seen earlier
					sprintf(msg_buffer, "Value = %u", x);
					sendmsg(msg_buffer);
				}
			}
		}
	}
	return 1;
}

void init_USART()
{
	UCSR0A	= 0x00;
	UCSR0B	= 0b01011000;/*enable receiver, transmitter and transmit interrupt */
	UBRR0	= 51;  /*51 to change baud rate, also change the value of this in the visualizer*/
}

void sendmsg (char *s)
{
	qcntr = 0;    /*preset indices*/
	sndcntr = 1;  /*set to one because first character already sent*/
	
	queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
	queue[qcntr++] = 0x0a;
	while (*s)
		queue[qcntr++] = *s++;   /*put characters into queue*/
		
	UDR0 = queue[0];  /*send first character to start process*/
}
void init_TIMER1SETUP()
{
	TCCR1A = 0; // Disable all o/p waveforms
	TCCR1B = 0b00000010;		// Noise Canceller off, Falling Edge, CLK/8 (2MHz) *OLDCODE CLK/8 (2MHz) T1 source ((1<<ICNC1) | (1<<ICES1) | (2<<CS10));*
	TIMSK1 = 0b00100001;//((1<<ICIE1) | (1 << TOIE1));
}


void init_TIMER2SETUP()
{
	TCCR2A = 0b00100001; 
	TCCR2B = 0b00000111;
	OCR2B = 0;	
	TIMSK2 = 0b00000000;//timer2
//	WGM20 = 1;
//	WGM21 = 0;
//	WGM22 = 0;
//	COM2B0 = 0;
//	COM2B1 = 1;
}

void init_adc()
{
	ADMUX =	 0b01000010;								//((1<<REFS0) | (0<<MUX0));  /* AVCC selected for VREF, ADC0 as ADC input  */
	ADCSRA = 0b11101111;								/* Enable ADC, Start Conversion, Auto Trigger enabled,  Interrupt enabled, Prescale = 32  */
	ADCSRB = 0b00000000; 
}

ISR(ADC_vect)
{
	adc_val = ADC;
	adc_flag = 1;
}
ISR(TIMER1_OVF_vect)	
{
	++timecount;										// Inc overflow counter on interrupt
}

ISR(TIMER1_CAPT_vect)
{
	end_edge = ICR1;									// The C compiler reads two 8bit regs for us
	clocks = ((unsigned long)timecount * 65536) + (unsigned long)end_edge - (unsigned long)start_edge;
	if (TCCR1B & 0b01000000)							//on falling edge  (1<<ICES1)) 
	{
		Time_Period_Low = (clocks)/2;
	}
	else												//on rising edge
	{
		Time_Period_High = (clocks)/2;
	} 
	
	if (TCCR1B & 0b01000000)
		TCCR1B = 0b00000010;
	else
		TCCR1B = 0b01000010;
		
	timecount = 0;										// Clear timecount for next time around
	start_edge = end_edge;								// We're counting rising to rising, so this end = next start
														// Save its time for next time through here
	new_timer_flag = 0;
}

ISR(USART_TX_vect)
{
	/*send next character and increment index*/
	if (qcntr != sndcntr)
		UDR0 = queue[sndcntr++];
}
