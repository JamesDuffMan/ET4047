/*
 * Project 1
 *
 * Created: 09/10/2013 23:37:12
 *  Author: James and Tanner
 */ 

#define THRESHOLD_VALUE 768

#include <avr/io.h>
#include <avr/interrupt.h>

unsigned int timecount0;
unsigned int RGBDelay;

void TimerJ(void);
void ADCJ(void);


int main(void)
{
	//DDRD = 0b11111111; .//Set portD so all its pins are outputs
	//Set PortD to all outputs because LEDs are connected to this PORT
	DDRB = 0b00111110;  /* PORTB bits 5,4,3,2,1 are set as outputs, remaining ones are inputs */
	
	DDRD = 0b00100000;	// pin all inputs
	PORTD = 0b00000000;		// Initialise to all off

	RGBDelay = 40;
	
	TimerJ();
	ADCJ();

	sei();				// Global interrupt enable (I=1)	

    while(1)
	{
		if( (PIND & 0b00001000) == 0b00001000) /*&& voltage something*/ 
		{
			PORTB = PORTB | 0b00100000;
		}
		else
			PORTB = PORTB & 0b11011111;
		
/*		if( (PIND & 0b00000000) == 0b00000000)
		{
			PORTB = 0b00010000;
		}
		else
		PORTB = 0b00110000;
*/		
	}
				// Do nothing loop
}

void TimerJ()
{
	timecount0 = 0;	// Initialise the overflow count. Note its scope
	TCCR0B = (5<<CS00);	// Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode
	
	TCCR0A = 0;			// Not strictly necessary as these are the reset states but it's good
	// practice to show what you're doing
	TCNT0 = 61;			// Recall: 256-61 = 195 & 195*64us = 12.48ms, approx 12.5ms
	TIMSK0 = (1<<TOIE0);	// Enable Timer 0 interrupt
	

}

void ADCJ()
{
	ADMUX = ((1<<REFS0) | (0<<MUX0));  /* AVCC selected for VREF, ADC0 as ADC input  */
	ADCSRA = ((1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(7<<ADPS0));
										/* Enable ADC, Start Conversion, Auto Trigger enabled, 
										   Interrupt enabled, Prescale = 128  */
	ADCSRB = (0<<ADTS0); /* Select AutoTrigger Source to Free Running Mode 
						    Strictly speaking - this is already 0, so we could omit the write to
						    ADCSRB, but included here so the intent is clear */
}

ISR(TIMER0_OVF_vect)
{
	TCNT0 = 61;		//TCNT0 needs to be set to the start point each time
	++timecount0;	// count the number of times the interrupt has been reached
	
	if (timecount0 >= RGBDelay)	
	{
		PORTB = PORTB ^ 0b00000010;		// Toggle all the bits hubnjimkjhgthyjhgvfbhnjmhgvfgbhn
		timecount0 = 0;		// Restart the overflow counter
	}
}

ISR (ADC_vect)//handles ADC interrupts
{
	unsigned int adc_reading;
	
	adc_reading = ADC;   /* ADC is in Free Running Mode - you don't have to set up anything for 
						    the next conversion */

	if (adc_reading > THRESHOLD_VALUE)
		RGBDelay = 20;
	else
		RGBDelay = 80;
	
}

