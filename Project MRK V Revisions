/*
 * Project 1
 *
 * Created: 09/10/2013 23:37:12
 *  Author: James Duffman (17206286) and Tanner Garity (19114141)
 */ 

#define THRESHOLD_VALUE 768
#define RGBDelay1 20;
#define RGBDelay2 80;


#include <avr/io.h>
#include <avr/interrupt.h>

unsigned int timecount0;
unsigned int RGBDelay;
unsigned int lightDetected = 0;
unsigned int new_adc_data = 0;
unsigned int buzzerFrequency = 0;


void TimerJ(void);
void ADCJ(void);


int main(void)
{
	//DDRD = 0b11111111; .//Set portD so all its pins are outputs
	//Set PortD to all outputs because LEDs are connected to this PORT
	DDRB = 0b00111110;  /* PORTB bits 5,4,3,2,1 are set as outputs, remaining ones are inputs */
	
	DDRD = 0b00100000;	// pin all inputs
	PORTD = 0b00000000;		// Initialize to all off

	RGBDelay = 40;
	
	TimerJ(); //start
	ADCJ();

	sei();				// Global interrupt enable (I=1)	

    while(1)
	{
		if( (PIND & 0b00001000) == 0b00001000) 
		{
			PORTB = PORTB | 0b00100000;//blue led on
			PORTB = PORTB & ~0b00010000;//red
		}
		else
		{
			PORTB = PORTB & 0b11011111;
			
			PORTB = PORTB | 0b00010000;
		}
		
		/* This is the logic of the ldr code but doesnt work :)
		if(new_adc_data == 1)
		{
			new_adc_data = 0;
			if(lightDetected == 1)
			{
				PORTB = ((PORTB & 0b00000000) | 0b0000000); //make everything 0 
			}
			else
			{
				PORTB = ((PORTB & 0b00010000) | 0b00010000);
			}
		}	
		*/
	}//closes while 1 loop
}

void TimerJ()
{
	timecount0 = 0;	//  the overflow count. Note its scope
	TCCR0B = (5<<CS00);	// Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode
	
	TCCR0A = 0;			// Not strictly necessary as these are the reset states but it's good
	// practice to show what you're doing
	TCNT0 = 61;			// Recall: 256-61 = 195 & 195*64us = 12.48ms, approx 12.5ms
	TIMSK0 = (1<<TOIE0);	// Enable Timer 0 interrupt
}

void ADCJ()
{
	ADMUX = ((1<<REFS0) | (0<<MUX0));  /* AVCC selected for VREF */
	ADCSRA = ((1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(7<<ADPS0));
										/* Enable ADC, Start Conversion, Auto Trigger enabled, 
										   Interrupt enabled, Pre-scale = 128  */
	ADCSRB = (0<<ADTS0); /* Select AutoTrigger Source to Free Running Mode 
						    Strictly speaking - this is already 0, so we could omit the write to
						    ADCSRB, but included here so the intent is clear */
}

ISR(TIMER0_OVF_vect)
{
	static int RGBChange;
	
	TCNT0 = 61;		//TCNT0 needs to be set to the start point each time
	++timecount0;	// count the number of times the interrupt has been reached
	
/*	if (timecount0 >= RGBDelay)	
	{
		PORTB = PORTB ^ 0b00000010;		// Toggle all the bits hubnjimkjhgthyjhgvfbhnjmhgvfgbhn make red
		timecount0 = 0;		// Restart the overflow counter
	}
*/// && ((PIND & 0b00001000) == 0b00001000))
	if((PIND & 0b00001000) == 0b00001000)
	{
		
		if (timecount0 >= RGBDelay)	
		{
			PORTB &= 0b11110001;//clean and make the red light turn off
			//PORTB &= 0b00000000;//red off
			if((PIND & 0b00000100) == 0b00000100) 
			{		
				switch (RGBChange)//based on what value this is it will make multiple colors cycle
				{
					case 0:
					RGBChange++;
					PORTB = PORTB |= (1<<1);//turns on the red
					break;
		
					case 1:
					RGBChange++;
					PORTB = PORTB |= (1<<2);//Make it green
					break;
		
					case 2:
					PORTB = PORTB |= (1<<3);//blue
					RGBChange = 0;
					break;
			
					default:
					PORTB = PORTB |= (1<<3);//blue
					RGBChange = 0;
					break;
				}
			
		
		timecount0 = 0;
		}	
		else 
		{
			switch(RGBChange)//this switch statement handles the other colors of the spectrum, comes in here if the button is pressed
			{
				case 0:
				RGBChange++;
			
				break;
			
				case 1:
				RGBChange++;
				PORTB = PORTB |= (1<<1);//turns on the red
				break;
			
				case 2:
				RGBChange++;
				PORTB = PORTB |= (1<<2);//Make it green
				break;
			
				case 3:
				RGBChange++;
				PORTB = PORTB |= (1<<1);//red
				PORTB = PORTB |= (1<<2);//green
				break;
			
				case 4:
				RGBChange++;
				PORTB = PORTB |= (1<<3);//blue
				break;
			
				case 5:
				RGBChange++;
				PORTB = PORTB |= (1<<1);//red
				PORTB = PORTB |= (1<<3);//blue
				break;
			
				case 6:
				RGBChange++;
				PORTB = PORTB |= (1<<2);//green
				PORTB = PORTB |= (1<<3);//blue
				break;
			
				case 7:
				RGBChange++;
				PORTB = PORTB |= (1<<1);//red
				PORTB = PORTB |= (1<<2);//green
				PORTB = PORTB |= (1<<3);//blue
				RGBChange = 0;
			
				break;
			}
			timecount0 = 0;
		}
	
			}
		}
		else
		{
		PORTB = (PORTB & 0b11110001);
		//check pind2 & if low then set buzzer to 40/20hz-buzztimerVariable
			if((PIND & 0b00001000) == 0)
			{
				if(lightDetected == 0)
				{
					PORTD = PORTD ^ (1 << PORTD5);
				}
				else
				{
					if(timecount0%2 == 0)
					{
						PORTD = PORTD ^ (1 << PORTD5);
					}
				}
			}
		}
		
		

}

ISR (ADC_vect)//handles ADC interrupts
{//a
	unsigned int adc_reading;
	
	//if ((PIND3 & 0b00001000) == 0b00000000)
	//	ADMUX = ((1<<REFS0) | (0<<MUX0));//a0
	
	adc_reading = ADC;   /* ADC is in Free Running Mode - you don't have to set up anything for 
						    the next conversion */
	/*if ((PIND3 & 0b00001000) == 0b00001000)
	{//b	
		if (adc_reading > THRESHOLD_VALUE)
		{//c
			RGBDelay = 20; //RGBDelay1;
		}//c
		else
		{//d
			RGBDelay = 80; //RGBDelay2
		}//d
	}
	else
	{//e
		if(adc_reading >= 500)//if the light detected is a certain reading i want to set values to it
		{//f
			lightDetected = 1;
			//PORTD = (PORTD & 0b11011111);//off
			
		}//f
		else
		{//g
			lightDetected = 0;
			//PORTD = (PORTD & 0b00100000);//on
			
		}//g
		new_adc_data = 1;
	}//e	
	*/
	if((ADMUX & 0b00001111) == 0b00000000)
	{
		if(adc_reading > THRESHOLD_VALUE)
		RGBDelay = 20;
	}
	else
	{
		RGBDelay = 80;
	}
		
	if((PIND & 0b00001000) == 0)
	{
		ADMUX = ADMUX | 0b00000001;
	}
	else
	{
		new_adc_data = 1;
		if(adc_reading > 500)
		lightDetected = 1;	
		else
		lightDetected = 0;
	}
	if((PIND & 0b00001000)==0b00001000)
	{
		ADMUX = ADMUX & 0b11110000;	
	}
		
}//a
